buildscript {
  repositories {
    jcenter()
    maven { url 'http://repo.spring.io/snapshot' }
  }
  dependencies {
  }
}

plugins {
  id 'org.springframework.boot' version '1.5.7.RELEASE'
}

final def DOXER_VERSION = '0.1.2'

final def SPRING_GROUPID = 'org.springframework'
final def SPRING_BOOT_GROUPID = 'org.springframework.boot'

final def SPRING_VERSION = '4.3.11.RELEASE'
final def SPRING_BOOT_VERSION = '1.5.7.RELEASE'

defaultTasks = ['clean', 'build']

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
//apply plugin: 'spring-boot' // http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
apply plugin: 'pmd'
apply plugin: 'jacoco'

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

version = DOXER_VERSION
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  mavenLocal()
  jcenter()
  maven { url 'http://repo.spring.io/release' }
  maven { url 'http://repo.spring.io/snapshot' }
  maven { url 'http://repo.spring.io/milestone' }
  maven { url 'http://maven.seasar.org/maven2/' }
}

test {
  systemProperties 'property': 'value'
}

dependencies {
  // Settings providedCompile
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

  compile (group: 'com.github.hatimiti', name: 'doxer-core', version: DOXER_VERSION) {
    exclude module: 'org.eclipse.datatools.connectivity.apache.derby.dbdefinition'
    exclude module: 'org.eclipse.datatools.connectivity.apache.derby'
    exclude module: 'org.eclipse.datatools.connectivity.console.profile'
    exclude module: 'org.eclipse.datatools.connectivity.db.generic'
    exclude module: 'org.eclipse.datatools.connectivity.dbdefinition.genericJDBC'
    exclude module: 'org.eclipse.datatools.connectivity.oda.consumer'
    exclude module: 'org.eclipse.datatools.connectivity.oda.design'
    exclude module: 'org.eclipse.datatools.connectivity.oda.flatfile'
    exclude module: 'org.eclipse.datatools.connectivity.oda.profile'
    exclude module: 'org.eclipse.datatools.connectivity.sqm.core'
    exclude module: 'org.eclipse.datatools.connectivity'
    exclude module: 'org.eclipse.datatools.modelbase.dbdefinition'
    exclude module: 'org.eclipse.datatools.modelbase.derby'
    exclude module: 'org.eclipse.datatools.modelbase.sql.query'
    exclude module: 'org.eclipse.datatools.modelbase.sql'
    exclude module: 'org.eclipse.datatools.enablement.hsqldb.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.hsqldb'
    exclude module: 'org.eclipse.datatools.enablement.oracle.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.oracle'
    exclude module: 'org.eclipse.datatools.enablement.ibm.db2.luw.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.ibm.db2.luw'
    exclude module: 'org.eclipse.datatools.enablement.ibm.informix.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.ibm.informix'
    exclude module: 'org.eclipse.datatools.enablement.msft.sqlserver.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.msft.sqlserver'
    exclude module: 'org.eclipse.datatools.enablement.mysql.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.mysql'
    exclude module: 'org.eclipse.datatools.enablement.oda.ws'
    exclude module: 'org.eclipse.datatools.enablement.oda.xml'
    exclude module: 'org.eclipse.datatools.enablement.postgresql.dbdefinition'
    exclude module: 'org.eclipse.datatools.enablement.postgresql'
    exclude module: 'org.eclipse.orbit.mongodb'
  }
  compile (group: 'com.github.hatimiti', name: 'doxer-common', version: DOXER_VERSION)
  compile (group: 'com.github.hatimiti', name: 'doxls', version: DOXER_VERSION)

  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: SPRING_GROUPID, name: 'spring-test', version: SPRING_VERSION
  testCompile group: SPRING_BOOT_GROUPID, name: 'spring-boot-starter-test', version: SPRING_BOOT_VERSION
  testCompile group: 'org.dbunit', name: 'dbunit', version: '2.5.1'

  providedRuntime group: SPRING_BOOT_GROUPID, name: 'spring-boot-starter-tomcat', version: SPRING_BOOT_VERSION
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
  }
}

war {
  baseName = 'doxer-sample'
  version = '0.1'
}

bootRepackage {
//  enabled = false
  mainClass = 'org.doxer.Application'
}

pmd { // コーディングチェック
  toolVersion = '5.1.2'
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'java-basic',
    'java-strings',
    'java-braces'
  ]
}

pmdMain {
  excludes = [
    '**/org/seasar/**/*.java',
    '**/db/dbflute/allcommon/**/*.java',
    '**/db/dbflute/bsbhv/**/*.java',
    '**/db/dbflute/bsentity/**/*.java',
    '**/db/dbflute/cbean/bs/**/*.java',
    '**/db/dbflute/cbean/cq/bs/**/*.java',
    '**/db/dbflute/cbean/cq/ciq/**/*.java',
  ]
}

jacoco { // コードカバレッジ測定
  toolVersion = "0.7.5.201505241946"
  reportsDir = file("$project.buildDir/reports/jacoco/")
}

test {
  systemProperty 'spring.profiles.active', 'ut'

  jacoco {
    append = false
    destinationFile = file("$buildDir/reports/jacoco/test.exec")
//    classDumpFile = file("$buildDir/reports/jacoco/classpathdumps")
  }
}

task cpdCheck(dependsOn: check) doLast {
  // CPD: 重複コードチェック
  File outDir = file("$project.buildDir/reports/pmd/")
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'csv',
    outputFile: new File(outDir, 'cpd.csv'))
  {
    fileset(dir: 'src/main/java') {
      include(name: '**/*.java')
      exclude(name: '**/db/dbflute/allcommon/**/*.java')
      exclude(name: '**/db/dbflute/bsbhv/**/*.java')
      exclude(name: '**/db/dbflute/bsentity/**/*.java')
      exclude(name: '**/db/dbflute/cbean/bs/**/*.java')
      exclude(name: '**/db/dbflute/cbean/cq/bs/**/*.java')
      exclude(name: '**/db/dbflute/cbean/cq/ciq/**/*.java')
    }
  }
}

/**
 * テストクラスのJavaDocを生成します．
 * (試験仕様書として利用)
 */
task javadoctest(type: Javadoc) {
  [javadoctest]*.options*.encoding = 'UTF-8'
  docsDirName = "docs/test/";
  source 'src/test/java'
}

bootRun {
  def profile = System.properties['spring.profiles.active'] ?: 'dev'
  systemProperty 'spring.profiles.active', profile
}
